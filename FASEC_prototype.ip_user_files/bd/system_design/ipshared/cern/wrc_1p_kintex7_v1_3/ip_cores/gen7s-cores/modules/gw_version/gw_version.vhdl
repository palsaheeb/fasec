---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Wishbone Version port
---------------------------------------------------------------------------------------
-- File           : gw_version.vhdl
-- Author         : auto-generated by wbgen2 from gw_version.wb
-- Created        : Wed Sep 30 18:10:01 2015
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE gw_version.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_version_port is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(1 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Port for std_logic_vector field: 'Board Identification' in reg: 'Board identification'
    wb2ver_board_id_i                        : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'GW Build' in reg: 'GW version'
    wb2ver_gw_ver_build_i                    : in     std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Minor GW version' in reg: 'GW version'
    wb2ver_gw_ver_minor_i                    : in     std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'Major GW version' in reg: 'GW version'
    wb2ver_gw_ver_major_i                    : in     std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'Minute' in reg: 'Synthetisation Date'
    wb2ver_syn_date_sec_i                    : in     std_logic_vector(5 downto 0);
-- Port for std_logic_vector field: 'Hour' in reg: 'Synthetisation Date'
    wb2ver_syn_date_hour_i                   : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Day' in reg: 'Synthetisation Date'
    wb2ver_syn_date_day_i                    : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Month' in reg: 'Synthetisation Date'
    wb2ver_syn_date_month_i                  : in     std_logic_vector(3 downto 0);
-- Port for std_logic_vector field: 'Year' in reg: 'Synthetisation Date'
    wb2ver_syn_date_year_i                   : in     std_logic_vector(6 downto 0);
-- Port for std_logic_vector field: 'Test' in reg: 'Synthetisation Date'
    wb2ver_syn_date_test_o                   : out    std_logic_vector(3 downto 0);
    wb2ver_syn_date_test_i                   : in     std_logic_vector(3 downto 0);
    wb2ver_syn_date_test_load_o              : out    std_logic
  );
end wb_version_port;

architecture syn of wb_version_port is

signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(1 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wb2ver_syn_date_test_load_o <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          wb2ver_syn_date_test_load_o <= '0';
          ack_in_progress <= '0';
        else
          wb2ver_syn_date_test_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(1 downto 0) is
          when "00" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= wb2ver_board_id_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(15 downto 0) <= wb2ver_gw_ver_build_i;
            rddata_reg(23 downto 16) <= wb2ver_gw_ver_minor_i;
            rddata_reg(31 downto 24) <= wb2ver_gw_ver_major_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10" => 
            if (wb_we_i = '1') then
              wb2ver_syn_date_test_load_o <= '1';
            end if;
            rddata_reg(5 downto 0) <= wb2ver_syn_date_sec_i;
            rddata_reg(10 downto 6) <= wb2ver_syn_date_hour_i;
            rddata_reg(15 downto 11) <= wb2ver_syn_date_day_i;
            rddata_reg(19 downto 16) <= wb2ver_syn_date_month_i;
            rddata_reg(26 downto 20) <= wb2ver_syn_date_year_i;
            rddata_reg(31 downto 28) <= wb2ver_syn_date_test_i;
            rddata_reg(27) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Board Identification
-- GW Build
-- Minor GW version
-- Major GW version
-- Minute
-- Hour
-- Day
-- Month
-- Year
-- Test
  wb2ver_syn_date_test_o <= wrdata_reg(31 downto 28);
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
